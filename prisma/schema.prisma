generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) @map("_id")
  name        String
  email       String   @unique
  password    String
  isAdmin     Boolean  @default(false)
  isActivated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  post        Post[]

  comments PostComment[]
  tokens   Token[]
  userInfo UserInfo?
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@unique([token, type])
}

model UserInfo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  avatar    String
  about     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  followDate DateTime @default(now())
  followerId String

  followingId String
  follower    String //
  following   String //
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  images      String[]
  videos      String[]
  userId      String
  isActivated Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id])
  comments PostComment[]
}

model PostComment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  image       String
  video       String
  userId      String
  postId      String   @db.ObjectId
  postReplyId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User   @relation(fields: [userId], references: [id])
  post      Post   @relation(fields: [postId], references: [id])
  postReply String //PostReplyComment @relation(fields: [postReplyId], references: [id], onDelete: Cascade)
}

model PostReplyComment {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  content          String
  userId           String
  questionId       Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             String // User              @relation(fields: [userId], references: [uuid])
  question         String //Post              @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionComments String //PostComment[]
}
