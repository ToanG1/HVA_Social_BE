generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) @map("_id")
  name        String
  email       String   @unique
  password    String
  isAdmin     Boolean  @default(false)
  isActivated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chats       Chats[]
  post        Post[]

  comments          PostComment[]
  tokens            Token[]
  userInfo          UserInfo?
  follow            Follow[]
  groups            Groups[]
  logs              Logs[]
  replycomment      PostReplyComment[]
  NotificationToken NotificationToken[]
  ViolationSC       ViolationSC[]
}

model Chats {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String
  follower                String
  creator                 String
  recipient               String
  messages                String
  isActivated             Boolean  @default(false)
  statusMessage           Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  //lastMessageSent DateTime @updatedAt    
  lastMessageSentUpdateAt DateTime @updatedAt
  createChats             Follow   @relation(fields: [follower], references: [followerId])
  user                    User     @relation(fields: [userId], references: [id])
}

model Groups {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  avatar                  String
  userId                  String
  creator                 String
  messages                String
  createdAt               DateTime @default(now())
  statusUsers             Boolean  @default(true)
  lastMessageSentUpdateAt DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id])
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@unique([token, type])
}

model UserInfo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  avatar    String
  about     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId String   @unique
  createdAt  DateTime @default(now())
  follower   User     @relation(fields: [followerId], references: [id])
  Chats      Chats[]
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  images      String[]
  videos      String[]
  userId      String
  isActivated Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id])
  comments PostComment[]
}

model PostComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  images    String[]
  videos    String[]
  userId    String
  postId    String   @db.ObjectId
  // commentReplyId      String // Nullable as it's an ID
  //contentCommentReply String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user         User               @relation(fields: [userId], references: [id])
  post         Post               @relation(fields: [postId], references: [id])
  commentReply PostReplyComment[]
}

model Logs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  timestamp DateTime @default(now())
  level     String //'info', 'warning', 'error'
  ipAddress String
  request   String

  user User @relation(fields: [userId], references: [id])
}

model PostReplyComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  images    String[]
  videos    String[]
  userId    String
  commentId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments PostComment @relation(fields: [commentId], references: [id])
  user     User        @relation(fields: [userId], references: [id])
}

model Notifications {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  notification_token NotificationToken @relation(fields: [noti_token_id], references: [id])
  noti_token_id      String            @db.ObjectId
  title              String
  body               String
  status             Boolean           @default(true)
  createdAt          DateTime
}

model NotificationToken {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  user         User            @relation(fields: [userId], references: [id])
  userId       String
  device_type  String
  token        String
  isActive     Boolean         @default(true)
  createdAt    DateTime
  notification Notifications[]

  @@unique([userId, device_type])
}

model ViolationSC {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  functionCode String
  idObject String
  reason   String
  createdAt DateTime @default(now())
}
